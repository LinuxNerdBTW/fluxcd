pipeline {
    agent {
        kubernetes {
            yamlFile 'clusters/prod/apps/chatbot/docker-agent.yaml'
            defaultContainer 'docker'
        }
    }

    environment {
        REPO_URL = 'https://github.com/LinuxNerdBTW/fluxcd.git'
        SPARSE_PATH = 'clusters/prod/apps/chatbot'
        IMAGE_TAG = ''
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                container('jnlp') {  // Use jnlp container for workspace setup
                    sh '''
                        mkdir -p /home/jenkins/agent/workspace
                        chmod -R 777 /home/jenkins/agent/workspace
                    '''
                }
            }
        }

        stage('Sparse Checkout') {
            steps {
                container('docker') {
                    sh '''
                        git init
                        git config --global --add safe.directory `pwd`
                        git remote remove origin || true
                        git remote add origin ${REPO_URL}
                        git sparse-checkout init --cone
                        git sparse-checkout set ${SPARSE_PATH}
                        git pull origin main
                    '''
                }
            }
        }

        stage('Set Tag') {
            steps {
                container('docker') {
                    script {
                        sh 'git config --global --add safe.directory `pwd`'
                        def shortCommit = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                        env.IMAGE_TAG = shortCommit
                        echo "Using image tag: ${env.IMAGE_TAG}"  // Added for debugging
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    dir("${env.SPARSE_PATH}") {
                        sh '''
                            echo "Building image with tag: docker.io/mangale/smart-ai:${IMAGE_TAG}"  // Debug
                            docker build -t docker.io/mangale/smart-ai:${IMAGE_TAG} .
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('docker') {
                    withCredentials([usernamePassword(credentialsId: 'docker.io', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker tag docker.io/smart-ai:${IMAGE_TAG} docker.io/$DOCKER_USER/smart-ai:${IMAGE_TAG}
                            docker push docker.io/$DOCKER_USER/smart-ai:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
          container('docker') {
                sh '''
                    docker logout
                '''
            }
            echo "Cleaning up workspace."
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}

